INCLUDE "hardware.inc"
INCLUDE "graphics.hgb"

RSSET _RAM

;Sprite OAM table
SPR_TBL RB 0
REPT 40
SPR\@_Y	RB 1 ;RGBDS, my OCD thanks you for not allowing a \t here
SPR\@_X	RB 1
SPR\@_TILE	RB 1
SPR\@_FLAGS	RB 1
ENDR
END_SPR_TBL RB 0

;Ram variables
RAM_START RB 0
DECK RB 68
RAM_END RB 0

;HRAM
RSSET _HRAM

;OAM DMA routine
update_oam RB 11

;HRam variables
HRAM_START RB 0
VBFLAG RB 1
RNG RB 1
MENUPOS RB 1
HRAM_END RB 0


SECTION	"Vblank",ROM0[$0040]
	push af
	ld a, $1
	ldh [VBFLAG], a
	jp update_oam
SECTION	"LCDC",ROM0[$0048]
	reti
SECTION	"Timer_Overflow",ROM0[$0050]
	reti
SECTION	"Serial",ROM0[$0058]
	reti
SECTION	"Input",ROM0[$0060]
	reti
	
SECTION "DMARout", ROM0
dma_src:
	ld a, $C0
	ld [rDMA], a
	ld a, $28
.wait
	dec a
	jr nz, .wait
	pop af
	reti
	
SECTION	"start",ROM0[$0100]
    jr	begin
	DB $BE, $EF
	
	ROM_HEADER	"VIRUS! GB vers ", CART_ROM, CART_ROM_256K, CART_RAM_NONE
	
begin:
	di ;Disable interrupts
	ld sp, $E000 ;Set the stack to the end of the RAM
	xor a
	ld [rNR52], a ;Shut down shound system
	call StopLCD
	
	ld bc, $11
	ld hl, dma_src
	ld de, update_oam
	call mem_Copy
	
	ld de, END_SPR_TBL-SPR_TBL
	ld hl, SPR_TBL
	call mem_Clear
	
	IF RAM_END - RAM_START != 0
	ld de, RAM_END - RAM_START
	ld hl, RAM_START
	call mem_Clear
	ENDC

	IF HRAM_END - HRAM_START != 0
	ld de, HRAM_END - HRAM_START
	ld hl, HRAM_START
	call mem_Clear
	ENDC
	
	;Init start screen
	ld a, %11100100
	ld [rBGP], a
	
	ld bc, EndTitleTileset-TitleTileset
	ld hl, TitleTileset
	ld de, _VRAM
	call mem_Copy
	
	ld bc, EndTitleScrn-TitleScrn
	ld hl, TitleScrn
	ld de, _SCRN0
	call mem_Copy
	
	ld a, LCDCF_ON | LCDCF_WINOFF | LCDCF_BG8000 |LCDCF_BG9800 | LCDCF_BGON | LCDCF_OBJOFF
	ld [rLCDC], a
	ld a, IEF_VBLANK
	ld [rIE], a
	ei
	
titleloop:
	halt
	ld a, [VBFLAG]
	or a
	jr z, titleloop
	xor a
	ld [VBFLAG], a
	
;Update menu arrow
	ldh a, [MENUPOS]
	or a
	jr nz, .join
	ld a, $38
	ld [_SCRN0+$0B*32+7],a
	xor a
	ld [_SCRN0+$0D*32+7],a
	jr .host
.join:
	ld a, $38
	ld [_SCRN0+$0D*32+7],a
	xor a
	ld [_SCRN0+$0B*32+7],a
.host:

;Reading joypad
	ld  a,%00100000
	ld  [rP1],a
	ld  a,[rP1]
	ld  a,[rP1]
	ld  a,[rP1]
	ld  a,[rP1]
	cpl
	and $0F
	swap a
	ld  b,a

	ld  a,%00010000
	ld  [rP1],a  
	ld  a,[rP1]
	ld  a,[rP1]
	ld  a,[rP1]
	ld  a,[rP1]
	cpl
	and $0F
	or  b
	
	bit 7, a
	jr nz, .dwn
	bit 6, a
	jr nz, .up
	bit 3, a
	jr nz, init
	bit 0, a
	jr nz, init
	jr .finput
.up:
	xor a
	ld [MENUPOS], a
	jr .finput
.dwn:
	ld a, $1
	ld [MENUPOS], a
	jr .finput

.finput:
	jr	titleloop

init:
	;srand()
	ld a, [rDIV]
	ld [RNG], a
	
	ld a, [MENUPOS]
	or a
	jr nz, .join
	
	ld bc, 68
	ld hl, DeckData
	ld de, DECK
	call mem_Copy 
	
	ld b, 68
	ld hl, DECK+68-1
.loop:
	call next_rand
	call modulus
	ld de, DECK
	add a,e
	ld e, a
	ld a, d
	adc a, 0
	ld d, a
	ld a, [de]
	ld c, a
	ld a, [hl]
	ld [de], a
	ld a, c
	ld [hl-], a
	dec b
	jr nz, .loop
	;Send deck to join
	
	jr gameloop
	
.join:
	;Recive deck

gameloop:
	;TODO Game
	jr gameloop


;Routines
mem_Clear:
	ld a, e                                   
	or d                                      
	jr z, .end                         

	xor a                                     
	ld [hl+], a                               
	dec de                                    
	jr mem_Clear                            

.end:
	ret  
	
mem_Copy:
	ld a, c                                   
	or b                                      
	jr z, .end                         

	ld a, [hl+]                               
	ld [de], a                                
	inc de                                    
	dec bc                                    
	jr mem_Copy                            

.end:
	ret 

StopLCD:
	ld      a,[rLCDC]
	rlca
	ret     nc
	
.wait:
	ld      a,[rLY]
	cp      145
	jr      c, .wait

	ld      a,[rLCDC]
	res     7,a
	ld      [rLCDC],a

	ret
	
next_rand:
	ld a, [RNG]
	srl a
	jr nc, .skip
	xor $AF
.skip
	ld [RNG], a
	ret
	
;Calculates a%b in a
modulus:
	ld c, a ;Store numerator in c
	xor a ;Remainder = 0
REPT 8
	sla c ;Set carry=c[i]
	rla ;Remainder << 1 and Remainder[0]=c[i]
	cp b
	jr c, .skip\@
	sub b ;If Remainder > b, Remanider -= b
.skip\@
ENDR
	ret
	
SECTION	"Deck",ROM0
DeckData:
REPT 5
	DB $00, $01, $02, $03 ;Organs
ENDR
REPT 4
	DB $10, $11, $12, $13 ;Viruses
	DB $20, $21, $22, $23, $24 ;Medicines
ENDR
	DB $04, $14 ;Jocker organ and virus
	DB $30, $30 ;Contagio
	DB $31, $31, $31 ;Thief
	DB $32, $32, $32 ;Transplant
	DB $33, $34 ;Latex glove, medical error
EndDeck: